AWSTemplateFormatVersion: '2010-09-09'
Description: 'ADRVE - Autonomous Delivery Robot Vision Enhancement POC'

Parameters:
  ProjectName:
    Type: String
    Default: adrve
    Description: Name for the project resources
  
  OperatorEmail:
    Type: String
    Default: user@domain.com
    Description: Email address for the operator to receive notifications
    
  VideoStreamResolution:
    Type: String
    Default: "1280x720"
    Description: Resolution of the video stream
    
  VideoStreamFrameRate:
    Type: Number
    Default: 15
    Description: Frame rate of the video stream
    
  BedrockModelId:
    Type: String
    Default: "anthropic.claude-3-sonnet-20240229-v1:0"
    Description: Amazon Bedrock model to use for inference
    
  FrameExtractionRate:
    Type: Number
    Default: 3
    Description: Number of frames to extract per second for cloud processing

Resources:
  # S3 Buckets
  VideoFramesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${ProjectName}-video-frames-${AWS::AccountId}"
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldFrames
            Status: Enabled
            ExpirationInDays: 7
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET]
            AllowedOrigins: ['*']
            MaxAge: 3600
  
  WebAppBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${ProjectName}-webapp-${AWS::AccountId}"
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET]
            AllowedOrigins: ['*']
            MaxAge: 3600
  
  # Kinesis Video Stream
  VideoStream:
    Type: AWS::KinesisVideo::Stream
    Properties:
      Name: !Sub "${ProjectName}-video-stream"
      DataRetentionInHours: 24
      MediaType: "video/h264"
      
  # DynamoDB Tables
  DetectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${ProjectName}-detections"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: frameId
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: N
      KeySchema:
        - AttributeName: frameId
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  # IAM Roles
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: !Sub "${ProjectName}-lambda-policy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                  - 's3:GetObject'
                Resource:
                  - !Sub "arn:aws:s3:::${VideoFramesBucket}/*"
              - Effect: Allow
                Action:
                  - 'kinesisvideo:GetDataEndpoint'
                  - 'kinesisvideo:GetMedia'
                  - 'kinesisvideo:DescribeStream'
                  - 'kinesisvideo:ListFragments'
                Resource: !GetAtt VideoStream.Arn
              - Effect: Allow
                Action:
                  - 'kinesis-video-media:GetMedia'
                Resource: !GetAtt VideoStream.Arn
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:GetItem'
                Resource: !GetAtt DetectionsTable.Arn
              - Effect: Allow
                Action:
                  - 'bedrock:InvokeModel'
                Resource: !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/${BedrockModelId}"
              - Effect: Allow
                Action:
                  - 'iot:Publish'
                Resource: !Sub "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/${ProjectName}/commands/*"
              - Effect: Allow
                Action:
                  - 'lambda:InvokeFunction'
                Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ProjectName}-frame-processor"

  # IoT Resources
  IoTPolicy:
    Type: AWS::IoT::Policy
    Properties:
      PolicyName: !Sub "${ProjectName}-iot-policy"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'iot:Connect'
              - 'iot:Subscribe'
              - 'iot:Receive'
              - 'iot:Publish'
            Resource: 
              - !Sub "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:client/*"
              - !Sub "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/${ProjectName}/commands/*"
              - !Sub "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/${ProjectName}/status/*"
              - !Sub "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topicfilter/${ProjectName}/commands/*"
              - !Sub "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topicfilter/${ProjectName}/status/*"

  # Lambda Layer for OpenCV
  OpenCVLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Sub "${ProjectName}-opencv-layer"
      Description: Layer containing OpenCV and NumPy for image processing
      CompatibleRuntimes:
        - python3.9
      Content:
        S3Bucket: !Ref VideoFramesBucket
        S3Key: layers/opencv-layer.zip
      LicenseInfo: MIT

  # Lambda Functions
  FrameProcessorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-frame-processor"
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Timeout: 60
      MemorySize: 1024
      Layers:
        - !Ref OpenCVLayer
      Environment:
        Variables:
          FRAME_BUCKET: !Ref VideoFramesBucket
          DETECTION_TABLE: !Ref DetectionsTable
          BEDROCK_MODEL_ID: !Ref BedrockModelId
          IOT_TOPIC_PREFIX: !Ref ProjectName
      Code:
        S3Bucket: !Ref VideoFramesBucket
        S3Key: lambda/frame_processor.zip

  FragmentProcessorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-fragment-processor"
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          FRAME_PROCESSOR_FUNCTION: !Ref FrameProcessorFunction
      Code:
        S3Bucket: !Ref VideoFramesBucket
        S3Key: lambda/fragment_processor.zip

  # Kinesis Data Stream for KVS Fragments
  FragmentDataStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: !Sub "${ProjectName}-fragments"
      ShardCount: 1
      RetentionPeriodHours: 24

  # Event Source Mapping to trigger Lambda from Kinesis
  FragmentProcessorEventMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !GetAtt FragmentDataStream.Arn
      FunctionName: !GetAtt FragmentProcessorFunction.Arn
      StartingPosition: LATEST

  # KVS Data Delivery Stream
  KVSDataDeliveryStream:
    Type: AWS::KinesisVideo::StreamConfig
    Properties:
      StreamName: !GetAtt VideoStream.Name
      MediaSourceConfig:
        MediaStorageConfiguration:
          Status: ENABLED
      NotificationConfiguration:
        DestinationConfig:
          DestinationUri: !GetAtt FragmentDataStream.Arn

Outputs:
  VideoStreamName:
    Description: Kinesis Video Stream Name
    Value: !Ref VideoStream
    
  VideoFramesBucketName:
    Description: S3 Bucket for Video Frames
    Value: !Ref VideoFramesBucket
    
  WebAppBucketName:
    Description: S3 Bucket for Web Application
    Value: !Ref WebAppBucket
    
  DetectionsTableName:
    Description: DynamoDB Table for Object Detections
    Value: !Ref DetectionsTable
    
  IoTPolicyName:
    Description: IoT Policy for Edge Device
    Value: !Ref IoTPolicy
    
  FrameProcessorFunctionName:
    Description: Lambda Function for Processing Frames
    Value: !Ref FrameProcessorFunction
    
  FragmentProcessorFunctionName:
    Description: Lambda Function for Processing Fragments
    Value: !Ref FragmentProcessorFunction
