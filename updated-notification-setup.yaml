  # Updated Lambda function to set up KVS stream notification to SNS
  KVSNotificationSetupFunction:
    Type: AWS::Lambda::Function
    DependsOn: KVSNotificationIAMPolicy
    Properties:
      FunctionName: !Sub "${ProjectName}-kvs-notification-setup"
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Timeout: 60
      MemorySize: 256
      Code:
        ZipFile: |
          import boto3
          import json
          import cfnresponse
          import time
          import logging

          # Configure logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def lambda_handler(event, context):
              """
              Set up KVS stream notification to SNS Topic
              
              This function is used as a CloudFormation custom resource to create
              a notification configuration for a Kinesis Video Stream that sends
              notifications to an SNS Topic.
              """
              logger.info(f"Received event: {json.dumps(event)}")
              
              try:
                  # Handle DELETE request
                  if event['RequestType'] == 'Delete':
                      logger.info("Delete request - sending success response")
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                      return
                  
                  # Get parameters from the event
                  stream_name = event['ResourceProperties']['VideoStreamName']
                  sns_topic_arn = event['ResourceProperties']['SNSTopicArn']
                  
                  logger.info(f"Setting up notification for stream {stream_name} to {sns_topic_arn}")
                  
                  # Configure KVS stream notification
                  kvs_client = boto3.client('kinesisvideo')
                  
                  # Wait for the stream to be active
                  max_retries = 10
                  retries = 0
                  while retries < max_retries:
                      try:
                          logger.info(f"Checking stream status (attempt {retries+1}/{max_retries})")
                          response = kvs_client.describe_stream(StreamName=stream_name)
                          
                          if response['StreamInfo']['Status'] == 'ACTIVE':
                              logger.info("Stream is active, proceeding with notification setup")
                              break
                              
                          logger.info(f"Stream status is {response['StreamInfo']['Status']}, waiting...")
                          retries += 1
                          time.sleep(5)
                          
                      except Exception as e:
                          logger.error(f"Error checking stream status: {str(e)}")
                          retries += 1
                          time.sleep(5)
                  
                  if retries >= max_retries:
                      logger.warning("Max retries reached waiting for stream to be active")
                  
                  # Configure notification using the correct method name and parameter structure
                  logger.info("Creating stream notification configuration")
                  response = kvs_client.update_notification_configuration(
                      StreamName=stream_name,
                      NotificationConfiguration={
                          'Status': 'ENABLED',
                          'DestinationConfig': {
                              'Uri': sns_topic_arn
                          }
                      }
                  )
                  
                  logger.info(f"Notification configuration created successfully: {json.dumps(response)}")
                  
                  # Send success response
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {
                      'Status': 'Notification configuration created successfully'
                  })
                  
              except Exception as e:
                  logger.error(f"Error: {str(e)}")
                  cfnresponse.send(event, context, cfnresponse.FAILED, {
                      'Error': str(e)
                  })

  # Updated custom resource to set up KVS notification
  KVSNotificationSetup:
    Type: Custom::KVSNotificationSetup
    DependsOn:
      - VideoStream
      - KVSNotificationTopic
      - KVSNotificationSetupFunction
    Properties:
      ServiceToken: !GetAtt KVSNotificationSetupFunction.Arn
      VideoStreamName: !Ref VideoStream
      SNSTopicArn: !Ref KVSNotificationTopic
